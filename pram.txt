MARCHING SQUARES - PRAM:
INPUT: f(x,y), grid_size, min_v, max_v
OUTPUT: set of lines R, where R = { ((x1, y1), (x2, y2)) ∈ ℝ² × ℝ² | f(x1, y1) = f(x2, y2) = c, with c ∈ [min_v, max_v] }

interpolate(val1, val2) := (-val1) / (val2 - val1)
DT = (max_v - min_v) / grid_size // Delta for interpolation
line_buffer[1...p] = {} //Define global buffer

for i=1,..,grid_size pardo{
    for j=1,..,grid_size{

        //Function to add a line segment tuple to the result set
        addLine((P1, P2))  { 
            line_buffer[i] = line_buffer[i] ∪ {(P1, P2)}
        }

        //COMPUTE the corners of the grid cell
        x1 = min_v + i * (max_v - min_v) / grid_size;
        y1 = min_v + j * (max_v - min_v) / grid_size;
        x2 = min_v + (i + 1) * (max_v - min_v) / grid_size;
        y2 = min_v + (j + 1) * (max_v - min_v) / grid_size;
        
        //EVALUATE the function at the corners
        A = f(x1, y1);
        B = f(x2, y1);
        C = f(x2, y2);
        D = f(x1, y2);
        case = (D > 0) << 3 | (C > 0) << 2 | (B > 0) << 1 | (A > 0);

        //Interpolate the distances to the zero level
        d_bottom = interpolate(A, B) * DT;
        d_right = interpolate(B, C) * DT;
        d_top = interpolate(C, D) * DT;
        d_left = interpolate(D, A) * DT;

        //critical_section to add lines
        switch case {
            case 0:
            case 15:
                break;
            case 1:
            case 14:
                P1 = (x1, y2 - d_left)
                P2 = (x1 + d_bottom, y1)
                addLine((P1,P2));
                break;
            case 2:
            case 13:
                P1 = (x1 + d_bottom, y1)
                P2 = (x2, y1 + d_right)
                addLine((P1, P2));
                break;
            case 3:
            case 12:
                P1 = (x1, y2 - d_left)
                P2 = (x2, y1 + d_right)
                addLine((P1, P2));
                break;
            case 4:
            case 11:
                P1 = (x2 - d_top, y2)
                P2 = (x2, y1 + d_right)
                addLine((P1, P2));
                break;
            case 5:
                P1 = (x1, y2 - d_left)
                P2 = (x2 - d_top, y2)
                P3 = (x1 + d_bottom, y1)
                P4 = (x2, y1 + d_right)
                addLine((P1, P2));
                addLine((P3, P4));
                break;
            case 6:
            case 9:
                P1 = (x1 + d_bottom, y1)
                P2 = (x2 - d_top, y2)
                addLine((P1, P2));
                break;
            case 7:
            case 8:
                P1 = (x1, y2 - d_left)
                P2 = (x2 - d_top, y2)
                addLine((P1, P2));
                break;
        }
    }
}

R = {}
for i=1,..,grid_size {
    R = R ∪ line_buffer[i] 
}

return R